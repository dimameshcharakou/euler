defmodule Finder do
  @table [
    ["8", "2", "22", "97", "38", "15", "0", "40", "0", "76", "4", "5", "7", "78", "52", "12", "50", "77", "91", "8"],
    ["49", "49", "99", "40", "17", "81", "18", "57", "60", "87", "17", "40", "98", "43", "69", "48", "4", "56", "62", "0"],
    ["81", "49", "31", "73", "55", "79", "14", "29", "93", "71", "40", "67", "53", "88", "30", "3", "49", "13", "36", "65"],
    ["52", "70", "95", "23", "4", "60", "11", "42", "69", "24", "68", "56", "1", "32", "56", "71", "37", "2", "36", "91"],
    ["22", "31", "16", "71", "51", "67", "63", "89", "41", "92", "36", "54", "22", "40", "40", "28", "66", "33", "13", "80"],
    ["24", "47", "32", "60", "99", "3", "45", "2", "44", "75", "33", "53", "78", "36", "84", "20", "35", "17", "12", "50"],
    ["32", "98", "81", "28", "64", "23", "67", "10", "26", "38", "40", "67", "59", "54", "70", "66", "18", "38", "64", "70"],
    ["67", "26", "20", "68", "2", "62", "12", "20", "95", "63", "94", "39", "63", "8", "40", "91", "66", "49", "94", "21"],
    ["24", "55", "58", "5", "66", "73", "99", "26", "97", "17", "78", "78", "96", "83", "14", "88", "34", "89", "63", "72"],
    ["21", "36", "23", "9", "75", "0", "76", "44", "20", "45", "35", "14", "0", "61", "33", "97", "34", "31", "33", "95"],
    ["78", "17", "53", "28", "22", "75", "31", "67", "15", "94", "3", "80", "4", "62", "16", "14", "9", "53", "56", "92"],
    ["16", "39", "5", "42", "96", "35", "31", "47", "55", "58", "88", "24", "0", "17", "54", "24", "36", "29", "85", "57"],
    ["86", "56", "0", "48", "35", "71", "89", "7", "5", "44", "44", "37", "44", "60", "21", "58", "51", "54", "17", "58"],
    ["19", "80", "81", "68", "5", "94", "47", "69", "28", "73", "92", "13", "86", "52", "17", "77", "4", "89", "55", "40"],
    ["4", "52", "8", "83", "97", "35", "99", "16", "7", "97", "57", "32", "16", "26", "26", "79", "33", "27", "98", "66"],
    ["88", "36", "68", "87", "57", "62", "20", "72", "3", "46", "33", "67", "46", "55", "12", "32", "63", "93", "53", "69"],
    ["4", "42", "16", "73", "38", "25", "39", "11", "24", "94", "72", "18", "8", "46", "29", "32", "40", "62", "76", "36"],
    ["20", "69", "36", "41", "72", "30", "23", "88", "34", "62", "99", "69", "82", "67", "59", "85", "74", "4", "36", "16"],
    ["20", "73", "35", "29", "78", "31", "90", "1", "74", "31", "49", "71", "48", "86", "81", "16", "23", "57", "5", "54"],
    ["1", "70", "54", "71", "83", "51", "54", "69", "16", "92", "33", "48", "61", "43", "52", "1", "89", "19", "67", "48"]
  ]

  @blank_diag_left [
    ["77", "91", "8"],
    ["56", "62", "0"],
    ["13", "36", "65"],
    ["2", "36", "91"],
    ["33", "13", "80"],
    ["17", "12", "50"],
    ["38", "64", "70"],
    ["49", "94", "21"],
    ["89", "63", "72"],
    ["31", "33", "95"],
    ["53", "56", "92"],
    ["29", "85", "57"],
    ["54", "17", "58"],
    ["89", "55", "40"],
    ["27", "98", "66"],
    ["93", "53", "69"],
    ["62", "76", "36"],
    ["4", "36", "16"],
    ["57", "5", "54"],
    ["19", "67", "48"]
  ]

  @blank_diag_right [
    ["22", "2", "8"],
    ["99", "49", "49"],
    ["31", "49", "81"],
    ["95", "70", "52"],
    ["16", "31", "22"],
    ["32", "47", "24"],
    ["81", "98", "32"],
    ["20", "26", "67"],
    ["58", "55", "24"],
    ["23", "36", "21"],
    ["53", "17", "78"],
    ["5", "39", "16"],
    ["0", "56", "86"],
    ["81", "80", "19"],
    ["8", "52", "4"],
    ["68", "36", "88"],
    ["16", "42", "4"],
    ["36", "69", "20"],
    ["35", "73", "20"],
    ["54", "70", "1"]
  ]

  @blank [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]

  def search_hor(pointer \\ 0, acc \\ 0, table \\ @table)
  def search_hor(_pointer, acc, []) do
    search_vert(0, acc, @table)
  end
  def search_hor(17, acc, table) do
    search_hor(0, acc, tl(table))
  end
  def search_hor(pointer, acc, table) do
    new = Enum.slice(hd(table), pointer, 4)
          |> multiple
    if new > acc do
      search_hor(pointer + 1, new, table)
    else
      search_hor(pointer + 1, acc, table)
    end
  end

  def search_vert(pointer \\ 0, acc \\ 0, table \\ @table)
  def search_vert(_pointer, acc, @blank) do
    search_diag(0, acc, @table)
  end
  def search_vert(17, acc, table) do
    search_vert(0, acc, Enum.map(table, &(tl(&1))))
  end
  def search_vert(pointer, acc, table) do
    new = Enum.slice(table, pointer, 4)
          |> Enum.map(&(hd(&1)))
          |> multiple
    if new > acc do
      search_vert(pointer + 1, new, table)
    else
      search_vert(pointer + 1, acc, table)
    end
  end

  def search_diag(pointer \\ 0, acc \\ 0, table \\ @table)
  def search_diag(_pointer, acc, @blank_diag_left) do
    search_diag(0, acc, Enum.map(@table, &(Enum.reverse(&1))))
  end
  def search_diag(_pointer, acc, @blank_diag_right), do: IO.puts(acc)
  def search_diag(17, acc, table) do
    search_diag(0, acc, Enum.map(table, &(tl(&1))))
  end
  def search_diag(pointer, acc, table) do
    new = Enum.slice(table, pointer, 4)
          |> find_diag
          |> multiple
    if new > acc do
      search_diag(pointer + 1, new, table)
    else
      search_diag(pointer + 1, acc, table)
    end
  end

  def find_diag(arr, acc \\ [])
  def find_diag([], acc), do: acc
  def find_diag([head|tail], acc) do
    arr = Enum.map(tail, &(tl(&1)))
    find_diag(arr, [hd(head)|acc])
  end

  def multiple([]), do: 1
  def multiple([head|tail]) do
    String.to_integer(head) * multiple(tail)
  end
end
